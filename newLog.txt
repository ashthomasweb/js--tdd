Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Tue Feb 22 2022 00:45:55 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Tue Feb 22 2022 00:55:50 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:21:26 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:24:48 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:29:29 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:31:15 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:31:23 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:33:46 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":1,"type":"number"}}
function maxIterate(inputArray) {
    return inputArray
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:34:01 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":1,"type":"number"}}
function maxIterate(inputArray) {
    return inputArray
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:35:02 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":10,"type":"number"}}
function maxIterate(inputArray) {
    return inputArray
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:37:03 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":"number","type":"string"}}
function maxIterate(inputArray) {
    return typeof(inputArray)
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:38:33 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":"object","type":"string"}}
function maxIterate(inputArray = [3,2]) {
    return typeof(inputArray)
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:38:53 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":null,"type":"object"}}
function maxIterate(inputArray = [3,2]) {
    return inputArray
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:39:16 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":[3,2],"type":"object"}}
function maxIterate(inputArray = [3,2]) {
    return inputArray
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Thu Feb 24 2022 23:40:01 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {

    return Math.max(...inputArray)
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Sat Feb 26 2022 17:52:04 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":3,"type":"number"},"actual":{"value":null,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    let temp = [...inputArray]
    return Math.max(temp)
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Sat Feb 26 2022 17:52:39 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    let temp = [...inputArray]
    return Math.max.apply(Math, temp)
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof (obj)
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Sat Feb 26 2022 17:55:54 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    // let temp = [...inputArray]
    console.log(inputArray)
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    // let temp = [...inputArray]
    // console.log(inputArray instanceof Array)
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 18:07:36 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    // let temp = [...inputArray]
    // console.log(inputArray instanceof Array)
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 18:10:04 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Sat Feb 26 2022 18:11:33 GMT-0500 (Eastern Standard Time)Test 16
{"expected":{"value":8,"type":"number"},"actual":{"value":8,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Sat Feb 26 2022 23:38:05 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:34:01 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:34:17 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:36:10 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:36:37 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:36:57 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:36:57 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:36:58 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:45:40 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:47:16 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:48:30 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 21:53:48 GMT-0500 (Eastern Standard Time)Test undefined
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 1
{"expected":{"value":"hi hal","type":"string"},"actual":{"value":"hi hal","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 2
{"expected":{"value":"hi dave","type":"string"},"actual":{"value":"hi ash","type":"string"}}
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 3
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 4
{"expected":{"value":"string","type":"string"},"actual":{"value":"string","type":"string"}}
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 5
{"expected":{"value":["Vertical Red Rectangle",18],"type":"object"},"actual":{"value":["Vertical Red Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 6
{"expected":{"value":["Diagonal Greenish Rectangle",18],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",18],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 7
{"expected":{"value":["Diagonal Greenish Rectangle",14],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",14],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 8
{"expected":{"value":["Diagonal Greenish Rectangle",50],"type":"object"},"actual":{"value":["Diagonal Greenish Rectangle",50],"type":"object"}}
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 9
{"expected":{"value":["Rectangular Blue shape that is 44 units around.",null],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 10
{"expected":{"value":["Rectangular Blue shape that is 45 units around.","[object Object]"],"type":"object"},"actual":{"value":["Rectangular Blue shape that is 44 units around.",{"length":10,"width":12,"type":"rectangular"}],"type":"object"}}
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 11
{"expected":{"value":20,"type":"number"},"actual":{"value":20,"type":"number"}}
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 12
{"expected":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"},"actual":{"value":{"length":2,"width":4,"type":"rectangle"},"type":"object"}}
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 13
{"expected":{"value":[1,2,3,4,2],"type":"object"},"actual":{"value":56,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 14
{"expected":{"value":3,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 22:00:12 GMT-0500 (Eastern Standard Time)Test 15
{"expected":{"value":2,"type":"number"},"actual":{"value":3,"type":"number"}}
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 1
[object Object]
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 2
[object Object]
function inputToOutput(input) {
    return input
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 3
[object Object]
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 4
[object Object]
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 5
[object Object]
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 6
[object Object]
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 7
[object Object]
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 8
[object Object]
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 9
[object Object]
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 10
[object Object]
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 11
[object Object]
(x, y) => {
        return (x * 4) + (y * 4)
    }

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 12
[object Object]
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 13
[object Object]
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 14
[object Object]
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Mon Feb 28 2022 22:01:24 GMT-0500 (Eastern Standard Time)Test 15
[object Object]
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}


        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 1
        Func Name  : function inputToOutput(input) {
    return input
}

        Expected   : hi hal

        Actual     : hi hal


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 2
        Func Name  : function inputToOutput(input) {
    return input
}

        Expected   : hi dave

        Actual     : hi ash


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 3
        Func Name  : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

        Expected   : string

        Actual     : string


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 4
        Func Name  : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

        Expected   : string

        Actual     : string


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 5
        Func Name  : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

        Expected   : Vertical Red Rectangle,18

        Actual     : Vertical Red Rectangle,18


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 6
        Func Name  : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

        Expected   : Diagonal Greenish Rectangle,18

        Actual     : Diagonal Greenish Rectangle,18


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 7
        Func Name  : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

        Expected   : Diagonal Greenish Rectangle,14

        Actual     : Diagonal Greenish Rectangle,14


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 8
        Func Name  : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

        Expected   : Diagonal Greenish Rectangle,50

        Actual     : Diagonal Greenish Rectangle,50


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 9
        Func Name  : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

        Expected   : Rectangular Blue shape that is 44 units around.,

        Actual     : Rectangular Blue shape that is 44 units around.,[object Object]


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 10
        Func Name  : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

        Expected   : Rectangular Blue shape that is 45 units around.,[object Object]

        Actual     : Rectangular Blue shape that is 44 units around.,[object Object]


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 11
        Func Name  : (x, y) => {
        return (x * 4) + (y * 4)
    }

        Expected   : 20

        Actual     : 20


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 12
        Func Name  : function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

        Expected   : [object Object]

        Actual     : [object Object]


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 13
        Func Name  : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

        Expected   : 1,2,3,4,2

        Actual     : 56


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 14
        Func Name  : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

        Expected   : 3

        Actual     : 3


        
        Block Name : This is a category

        Date Run   : Mon Feb 28 2022 22:15:12 GMT-0500 (Eastern Standard Time)

        Test Num   : Test 15
        Func Name  : function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

        Expected   : 2

        Actual     : 3


        Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 1
        Func Def   : function inputToOutput(input) {
    return input
}
        Expected   : hi hal
        Actual     : hi hal

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 2
        Func Def   : function inputToOutput(input) {
    return input
}
        Expected   : hi dave
        Actual     : hi ash

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 3
        Func Def   : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
        Expected   : string
        Actual     : string

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 4
        Func Def   : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
        Expected   : string
        Actual     : string

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 5
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Vertical Red Rectangle,18
        Actual     : Vertical Red Rectangle,18

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 6
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Diagonal Greenish Rectangle,18
        Actual     : Diagonal Greenish Rectangle,18

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 7
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Diagonal Greenish Rectangle,14
        Actual     : Diagonal Greenish Rectangle,14

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 8
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Diagonal Greenish Rectangle,50
        Actual     : Diagonal Greenish Rectangle,50

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 9
        Func Def   : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
        Expected   : Rectangular Blue shape that is 44 units around.,
        Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 10
        Func Def   : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
        Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
        Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 11
        Func Def   : (x, y) => {
        return (x * 4) + (y * 4)
    }
        Expected   : 20
        Actual     : 20

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 12
        Func Def   : function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
        Expected   : [object Object]
        Actual     : [object Object]

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 13
        Func Def   : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
        Expected   : 1,2,3,4,2
        Actual     : 56

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 14
        Func Def   : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
        Expected   : 3
        Actual     : 3

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:45 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 15
        Func Def   : function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
        Expected   : 2
        Actual     : 3

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 1
        Func Def   : function inputToOutput(input) {
    return input
}
        Expected   : hi hal
        Actual     : hi hal

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 2
        Func Def   : function inputToOutput(input) {
    return input
}
        Expected   : hi dave
        Actual     : hi ash

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 4
        Func Def   : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
        Expected   : string
        Actual     : string

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 3
        Func Def   : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
        Expected   : string
        Actual     : string

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 5
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Vertical Red Rectangle,18
        Actual     : Vertical Red Rectangle,18

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 6
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Diagonal Greenish Rectangle,18
        Actual     : Diagonal Greenish Rectangle,18

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 7
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Diagonal Greenish Rectangle,14
        Actual     : Diagonal Greenish Rectangle,14

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 8
        Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
        Expected   : Diagonal Greenish Rectangle,50
        Actual     : Diagonal Greenish Rectangle,50

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 9
        Func Def   : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
        Expected   : Rectangular Blue shape that is 44 units around.,
        Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 10
        Func Def   : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
        Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
        Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 11
        Func Def   : (x, y) => {
        return (x * 4) + (y * 4)
    }
        Expected   : 20
        Actual     : 20

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 12
        Func Def   : function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
        Expected   : [object Object]
        Actual     : [object Object]

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 13
        Func Def   : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
        Expected   : 1,2,3,4,2
        Actual     : 56

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 14
        Func Def   : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
        Expected   : 3
        Actual     : 3

Block Name : This is a category
        Date Run   : Mon Feb 28 2022 22:16:52 GMT-0500 (Eastern Standard Time)
        Test Num   : Test 15
        Func Def   : function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
        Expected   : 2
        Actual     : 3

Block Name : This is a categoryDate Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Func Def   : function inputToOutput(input) {
    return input
}
Expected   : hi hal
Actual     : hi hal

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 2
Func Def   : function inputToOutput(input) {
    return input
}
Expected   : hi dave
Actual     : hi ash

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 3
Func Def   : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 4
Func Def   : function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 5
Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
Actual     : Vertical Red Rectangle,18

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 6
Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
Actual     : Diagonal Greenish Rectangle,18

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 7
Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
Actual     : Diagonal Greenish Rectangle,14

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 8
Func Def   : function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
Actual     : Diagonal Greenish Rectangle,50

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 9
Func Def   : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 10
Func Def   : function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 11
Func Def   : (x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
Actual     : 20

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 12
Func Def   : function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
Actual     : [object Object]

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 13
Func Def   : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
Actual     : 56

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 14
Func Def   : function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
Actual     : 3

Date Run   : Mon Feb 28 2022 22:20:22 GMT-0500 (Eastern Standard Time)
Test Num   : Test 15
Func Def   : function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
Actual     : 3

*** *** *** *** ***
*** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi hal
Actual     : hi hal

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 2
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi dave
Actual     : hi ash

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 3
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 4
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 5
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
Actual     : Vertical Red Rectangle,18

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 6
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
Actual     : Diagonal Greenish Rectangle,18

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 7
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
Actual     : Diagonal Greenish Rectangle,14

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 8
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
Actual     : Diagonal Greenish Rectangle,50

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 9
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 10
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 11
Func Def   :
(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
Actual     : 20

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 12
Func Def   :
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
Actual     : [object Object]

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 13
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
Actual     : 56

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 14
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
Actual     : 3

Date Run   : Mon Feb 28 2022 22:22:27 GMT-0500 (Eastern Standard Time)
Test Num   : Test 15
Func Def   :
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
Actual     : 3

*** *** *** *** ***
*** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi hal
Actual     : hi hal

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 2
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi dave
Actual     : hi ash

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 3
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 4
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 5
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
Actual     : Vertical Red Rectangle,18

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 6
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
Actual     : Diagonal Greenish Rectangle,18

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 7
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
Actual     : Diagonal Greenish Rectangle,14

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 8
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
Actual     : Diagonal Greenish Rectangle,50

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 9
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 10
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 11
Func Def   :
(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
Actual     : 20

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 12
Func Def   :
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
Actual     : [object Object]

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 13
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
Actual     : 56

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 14
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
Actual     : 3

Date Run   : Mon Feb 28 2022 22:22:30 GMT-0500 (Eastern Standard Time)
Test Num   : Test 15
Func Def   :
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
Actual     : 3

*** *** *** *** *** ***
*** *** *** *** *** ***
*** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi hal
Actual     : hi hal

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 2
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi dave
Actual     : hi ash

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 3
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 4
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 5
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
Actual     : Vertical Red Rectangle,18

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 6
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
Actual     : Diagonal Greenish Rectangle,18

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 7
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
Actual     : Diagonal Greenish Rectangle,14

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 8
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
Actual     : Diagonal Greenish Rectangle,50

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 9
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 10
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 11
Func Def   :
(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
Actual     : 20

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 12
Func Def   :
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
Actual     : [object Object]

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 13
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
Actual     : 56

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 14
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
Actual     : 3

Date Run   : Mon Feb 28 2022 22:23:37 GMT-0500 (Eastern Standard Time)
Test Num   : Test 15
Func Def   :
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
Actual     : 3

[33m*** *** *** *** *** *** *** *** *** *** *** *** *** ***[39m
[33m*** *** *** *** *** *** *** *** *** *** *** *** *** ***[39m
[33m*** *** *** *** *** *** *** *** *** *** *** *** *** ***[39m
Block Name : This is a category
Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi hal
Actual     : hi hal

Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 2
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi dave
Actual     : hi ash

Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 3
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 4
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
Actual     : string

Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 5
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
Actual     : Vertical Red Rectangle,18

Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 6
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
Actual     : Diagonal Greenish Rectangle,18

Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 7
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
Actual     : Diagonal Greenish Rectangle,14

Date Run   : Mon Feb 28 2022 22:27:28 GMT-0500 (Eastern Standard Time)
Test Num   : Test 8
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
Actual     : Diagonal Greenish Rectangle,50

Date Run   : Mon Feb 28 2022 22:27:29 GMT-0500 (Eastern Standard Time)
Test Num   : Test 9
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:27:29 GMT-0500 (Eastern Standard Time)
Test Num   : Test 10
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]

Date Run   : Mon Feb 28 2022 22:27:29 GMT-0500 (Eastern Standard Time)
Test Num   : Test 11
Func Def   :
(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
Actual     : 20

Date Run   : Mon Feb 28 2022 22:27:29 GMT-0500 (Eastern Standard Time)
Test Num   : Test 12
Func Def   :
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
Actual     : [object Object]

Date Run   : Mon Feb 28 2022 22:27:29 GMT-0500 (Eastern Standard Time)
Test Num   : Test 13
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
Actual     : 56

Date Run   : Mon Feb 28 2022 22:27:29 GMT-0500 (Eastern Standard Time)
Test Num   : Test 14
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
Actual     : 3

Date Run   : Mon Feb 28 2022 22:27:29 GMT-0500 (Eastern Standard Time)
Test Num   : Test 15
Func Def   :
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
Actual     : 3


*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 2
Func Def   :
function inputToOutput(input) {
    return input
}
Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 3
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 4
Func Def   :
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 5
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 6
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 7
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 8
Func Def   :
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 9
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 10
Func Def   :
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 11
Func Def   :
(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 12
Func Def   :
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 13
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 14
Func Def   :
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number

Date Run   : Mon Feb 28 2022 22:47:17 GMT-0500 (Eastern Standard Time)
Test Num   : Test 15
Func Def   :
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number


*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1

Func Def   : See below
function inputToOutput(input) {
    return input
}
Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 2

Func Def   : See below
function inputToOutput(input) {
    return input
}
Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 3

Func Def   : See below
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 4

Func Def   : See below
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 5

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 6

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 7

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 9

Func Def   : See below
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 8

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 10

Func Def   : See below
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 11

Func Def   : See below
(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 12

Func Def   : See below
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 13

Func Def   : See below
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 14

Func Def   : See below
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



Date Run   : Mon Feb 28 2022 22:55:07 GMT-0500 (Eastern Standard Time)
Test Num   : Test 15

Func Def   : See below
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
___________
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function inputToOutput(input) {
    return input
}
Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



___________
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function inputToOutput(input) {
    return input
}
Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



___________
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



___________
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



___________
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



___________
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



___________
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



___________
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



___________
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



___________
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



___________
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 22:56:21 GMT-0500 (Eastern Standard Time)

Func Def   : See below
function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
___________
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



___________
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



___________
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



___________
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



___________
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



___________
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



___________
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



___________
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



___________
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



___________
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



___________
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 22:56:55 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
___________
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



___________
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



___________
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



___________
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



___________
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



___________
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



___________
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



___________
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



___________
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



___________
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



___________
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 22:59:52 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
___________
Results: [32mPass[39m
___________
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



___________
Results:[33m Anticipating error:[39m [32mPass[39m
___________
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



___________
Results:[33m Anticipating error:[39m [31m**Fail**[39m
___________
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Results: [32mPass[39m
___________
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Results: [32mPass[39m
___________
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



___________
Results: [32mPass[39m
___________
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



___________
Results: [32mPass[39m
___________
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



___________
Results: [32mPass[39m
___________
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



___________
Results:[33m Anticipating error:[39m [32mPass[39m
___________
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Results: [31m**Fail**[39m
___________
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Results: [32mPass[39m
___________
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



___________
Results: [31m**Fail**[39m
___________
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



___________
Results:[33m Anticipating error:[39m [32mPass[39m
___________
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



___________
Results: [32mPass[39m
___________
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



___________
Results:[33m Anticipating error:[39m [32mPass[39m
___________
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 23:02:53 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
___________
Results: true
___________
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



___________
Results:Expected to Fail: true
___________
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}
Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



___________
Results:Expected to Fail: false
___________
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Results: true
___________
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}
Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



___________
Results: true
___________
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



___________
Results: true
___________
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



___________
Results: true
___________
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



___________
Results: true
___________
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}
Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



___________
Results:Expected to Fail: true
___________
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Results: false
___________
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}
Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



___________
Results: true
___________
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }
Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



___________
Results: false
___________
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}
Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



___________
Results:Expected to Fail: true
___________
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



___________
Results: true
___________
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}
Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



___________
Results:Expected to Fail: true
___________
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 23:04:56 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}
Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
*******
Results    :  Pass
___________
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



*******
Results    : Expected to Fail: Pass
___________
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



*******
Results    : Expected to Fail: Fail
___________
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    :  Pass
___________
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    :  Pass
___________
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



*******
Results    :  Pass
___________
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



*******
Results    :  Pass
___________
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



*******
Results    :  Pass
___________
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



*******
Results    : Expected to Fail: Pass
___________
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Fail
___________
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Pass
___________
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



*******
Results    :  Fail
___________
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



*******
Results    : Expected to Fail: Pass
___________
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



*******
Results    :  Pass
___________
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



*******
Results    : Expected to Fail: Pass
___________
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 23:08:33 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
*******
Results    :  Pass
-----------
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



*******
Results    : Expected to Fail: Pass
-----------
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



*******
Results    :  Pass
-----------
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    : Expected to Fail: Fail
-----------
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    :  Pass
-----------
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



*******
Results    :  Pass
-----------
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



*******
Results    :  Pass
-----------
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



*******
Results    :  Pass
-----------
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



*******
Results    : Expected to Fail: Pass
-----------
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Fail
-----------
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Pass
-----------
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



*******
Results    :  Fail
-----------
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



*******
Results    : Expected to Fail: Pass
-----------
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



*******
Results    :  Pass
-----------
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



*******
Results    : Expected to Fail: Pass
-----------
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 23:09:06 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
*******
Results    :  Pass
*******
Test Num   : Test 1
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



*******
Results    : Expected to Fail: Pass
*******
Test Num   : Test 2
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



*******
Results    : Expected to Fail: Fail
*******
Test Num   : Test 3
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    :  Pass
*******
Test Num   : Test 4
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    :  Pass
*******
Test Num   : Test 5
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



*******
Results    :  Pass
*******
Test Num   : Test 6
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



*******
Results    :  Pass
*******
Test Num   : Test 7
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



*******
Results    :  Pass
*******
Test Num   : Test 8
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



*******
Results    : Expected to Fail: Pass
*******
Test Num   : Test 9
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Fail
*******
Test Num   : Test 10
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Pass
*******
Test Num   : Test 11
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



*******
Results    :  Fail
*******
Test Num   : Test 12
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



*******
Results    : Expected to Fail: Pass
*******
Test Num   : Test 13
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



*******
Results    :  Pass
*******
Test Num   : Test 14
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



*******
Results    : Expected to Fail: Pass
*******
Test Num   : Test 15
Date Run   : Mon Feb 28 2022 23:09:50 GMT-0500 (Eastern Standard Time)
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 23:11:34 GMT-0500 (Eastern Standard Time)
*******
Results    :  Pass
Test Num   : Test 1
*******
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



*******
Results    : Expected to Fail: Pass
Test Num   : Test 2
*******
Func Def   : See below

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



*******
Results    : Expected to Fail: Fail
Test Num   : Test 3
*******
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    :  Pass
Test Num   : Test 4
*******
Func Def   : See below

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Results    :  Pass
Test Num   : Test 5
*******
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



*******
Results    :  Pass
Test Num   : Test 6
*******
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



*******
Results    :  Pass
Test Num   : Test 7
*******
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



*******
Results    :  Pass
Test Num   : Test 8
*******
Func Def   : See below

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



*******
Results    : Expected to Fail: Pass
Test Num   : Test 9
*******
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Fail
Test Num   : Test 10
*******
Func Def   : See below

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Results    :  Pass
Test Num   : Test 11
*******
Func Def   : See below

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



*******
Results    :  Fail
Test Num   : Test 12
*******
Func Def   : See below

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



*******
Results    : Expected to Fail: Pass
Test Num   : Test 13
*******
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



*******
Results    :  Pass
Test Num   : Test 14
*******
Func Def   : See below

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



*******
Results    : Expected to Fail: Pass
Test Num   : Test 15
*******
Func Def   : See below

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 23:12:54 GMT-0500 (Eastern Standard Time)
*******
Test Num   : Test 1
Results    :  Pass
*******
Func Def   : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string



*******
Test Num   : Test 2
Results    : Expected to Fail: Pass
*******
Func Def   : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string



*******
Test Num   : Test 3
Results    : Expected to Fail: Fail
*******
Func Def   : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Test Num   : Test 4
Results    :  Pass
*******
Func Def   : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string



*******
Test Num   : Test 5
Results    :  Pass
*******
Func Def   : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object



*******
Test Num   : Test 6
Results    :  Pass
*******
Func Def   : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object



*******
Test Num   : Test 7
Results    :  Pass
*******
Func Def   : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object



*******
Test Num   : Test 8
Results    :  Pass
*******
Func Def   : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object



*******
Test Num   : Test 9
Results    : Expected to Fail: Pass
*******
Func Def   : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Test Num   : Test 10
Results    :  Fail
*******
Func Def   : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object



*******
Test Num   : Test 11
Results    :  Pass
*******
Func Def   : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number



*******
Test Num   : Test 12
Results    :  Fail
*******
Func Def   : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object



*******
Test Num   : Test 13
Results    : Expected to Fail: Pass
*******
Func Def   : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number



*******
Test Num   : Test 14
Results    :  Pass
*******
Func Def   : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number



*******
Test Num   : Test 15
Results    : Expected to Fail: Pass
*******
Func Def   : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 23:16:08 GMT-0500 (Eastern Standard Time)
*******
Test Num   : Test 1
Results    :  Pass
*******
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string



*******
Test Num   : Test 2
Results    : Expected to Fail: Pass
*******
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string



*******
Test Num   : Test 4
Results    :  Pass
*******
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object



*******
Test Num   : Test 3
Results    : Expected to Fail: Fail
*******
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object



*******
Test Num   : Test 5
Results    :  Pass
*******
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object



*******
Test Num   : Test 6
Results    :  Pass
*******
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object



*******
Test Num   : Test 7
Results    :  Pass
*******
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object



*******
Test Num   : Test 8
Results    :  Pass
*******
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object



*******
Test Num   : Test 9
Results    : Expected to Fail: Pass
*******
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object



*******
Test Num   : Test 10
Results    :  Fail
*******
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object



*******
Test Num   : Test 11
Results    :  Pass
*******
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object



*******
Test Num   : Test 12
Results    :  Fail
*******
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object



*******
Test Num   : Test 13
Results    : Expected to Fail: Pass
*******
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object



*******
Test Num   : Test 14
Results    :  Pass
*******
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined



*******
Test Num   : Test 15
Results    : Expected to Fail: Pass
*******
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 23:24:09 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Results    :  Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string



Test Num   : Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string



Test Num   : Test 3
Results    : Expected to Fail: Fail
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object



Test Num   : Test 4
Results    :  Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object



Test Num   : Test 5
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object



Test Num   : Test 6
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object



Test Num   : Test 7
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object



Test Num   : Test 8
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object



Test Num   : Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object



Test Num   : Test 10
Results    :  Fail
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object



Test Num   : Test 11
Results    :  Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object



Test Num   : Test 12
Results    :  Fail
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object



Test Num   : Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object



Test Num   : Test 14
Results    :  Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined



Test Num   : Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined




*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 23:24:53 GMT-0500 (Eastern Standard Time)
Test Num   : Test 1
Results    :  Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________




Test Num   : Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________




Test Num   : Test 3
Results    : Expected to Fail: Fail
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________




Test Num   : Test 4
Results    :  Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________




Test Num   : Test 5
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________




Test Num   : Test 6
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________




Test Num   : Test 7
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________




Test Num   : Test 8
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________




Test Num   : Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________




Test Num   : Test 10
Results    :  Fail
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________




Test Num   : Test 11
Results    :  Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________




Test Num   : Test 12
Results    :  Fail
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________




Test Num   : Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________




Test Num   : Test 14
Results    :  Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________




Test Num   : Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 23:25:54 GMT-0500 (Eastern Standard Time)
Test 1
Results    :  Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________





Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________





Test 3
Results    : Expected to Fail: Fail
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 4
Results    :  Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 5
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________





Test 6
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________





Test 7
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________





Test 8
Results    :  Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________





Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 10
Results    :  Fail
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 11
Results    :  Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________





Test 12
Results    :  Fail
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________





Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________





Test 14
Results    :  Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________






*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : This is a category
Date Run   : Mon Feb 28 2022 23:26:20 GMT-0500 (Eastern Standard Time)
Test 1
Results    : Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________





Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________





Test 3
Results    : Expected to Fail: Fail
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 4
Results    : Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 5
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________





Test 6
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________





Test 7
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________





Test 8
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________





Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 10
Results    : Fail
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 11
Results    : Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________





Test 12
Results    : Fail
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________





Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________





Test 14
Results    : Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________






*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : Set of tests for Mock Application
Date Run   : Mon Feb 28 2022 23:28:45 GMT-0500 (Eastern Standard Time)

Test 1
Results    : Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________





Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________





Test 3
Results    : Expected to Fail: Fail
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 4
Results    : Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 5
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________





Test 6
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________





Test 7
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________





Test 8
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________





Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 10
Results    : Fail
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 11
Results    : Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________





Test 12
Results    : Fail
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________





Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________





Test 14
Results    : Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________






*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : Set of tests for Mock Application
Date Run   : Mon Feb 28 2022 23:32:31 GMT-0500 (Eastern Standard Time)

Test 1
Results    : Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________





Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________





Test 3
Results    : Expected to Fail: **Fail**
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 4
Results    : Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 5
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________





Test 6
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________





Test 7
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________





Test 8
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________





Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 10
Results    : **Fail**
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 11
Results    : Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________





Test 12
Results    : **Fail**
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________





Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________





Test 14
Results    : Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________






*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : Set of tests for Mock Application
Date Run   : Mon Feb 28 2022 23:45:16 GMT-0500 (Eastern Standard Time)

Test 1
Results    : Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________





Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________





Test 3
Results    : Expected to Fail: **Fail**
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 4
Results    : Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 5
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________





Test 6
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________





Test 7
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________





Test 8
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________





Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 10
Results    : **Fail**
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 11
Results    : Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________





Test 12
Results    : Expected to Fail: Pass
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________





Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________





Test 14
Results    : Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 16
Results    : Expected to Fail: **Fail**
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________






*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : Set of tests for Mock Application
Date Run   : Mon Feb 28 2022 23:45:34 GMT-0500 (Eastern Standard Time)

Test 1
Results    : Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________





Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________





Test 3
Results    : Expected to Fail: **Fail**
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 4
Results    : Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 5
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________





Test 6
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________





Test 7
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________





Test 8
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________





Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 10
Results    : **Fail**
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 11
Results    : Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________





Test 12
Results    : Expected to Fail: Pass
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________





Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________





Test 14
Results    : Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 16
Results    : Pass
***********
This should pass with flying colors!

Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________






*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Block Name : Set of tests for Mock Application
Date Run   : Mon Feb 28 2022 23:50:29 GMT-0500 (Eastern Standard Time)

Test 1
Results    : Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi hal
w/ type    : string
Actual     : hi hal
w/ type    : string
From Input : hi hal
w/ type    : string
___________





Test 2
Results    : Expected to Fail: Pass
***********
Definition : 

function inputToOutput(input) {
    return input
}

Expected   : hi dave
w/ type    : string
Actual     : hi ash
w/ type    : string
From Input : hi ash
w/ type    : string
___________





Test 3
Results    : Expected to Fail: **Fail**
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 4
Results    : Pass
***********
Definition : 

function returnTypeString() {
    let obj = 'This string'
    return typeof(obj)
}

Expected   : string
w/ type    : string
Actual     : string
w/ type    : string
From Input : null
w/ type    : object
___________





Test 5
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Vertical Red Rectangle,18
w/ type    : object
Actual     : Vertical Red Rectangle,18
w/ type    : object
From Input : red,4,5,vertical
w/ type    : object
___________





Test 6
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,18
w/ type    : object
Actual     : Diagonal Greenish Rectangle,18
w/ type    : object
From Input : greenish,4,5,diagonal
w/ type    : object
___________





Test 7
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,14
w/ type    : object
Actual     : Diagonal Greenish Rectangle,14
w/ type    : object
From Input : greenish,2,5,diagonal
w/ type    : object
___________





Test 8
Results    : Pass
***********
Definition : 

function innerFrameGenerator(color, length, width, orientation) {
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let position = orientation[0].toUpperCase() + orientation.substring(1)
    let description = `${position} ${colorValue} Rectangle`
    let perimeter = length * 2 + width * 2
    let output = [description, perimeter]
    return output
}

Expected   : Diagonal Greenish Rectangle,50
w/ type    : object
Actual     : Diagonal Greenish Rectangle,50
w/ type    : object
From Input : greenish,20,5,diagonal
w/ type    : object
___________





Test 9
Results    : Expected to Fail: Pass
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 44 units around.,
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 10
Results    : **Fail**
***********
Definition : 

function objectFrameGenerator(color, length, width, type) {
    let shape = rectGen(length, width, type)
    let colorValue = color[0].toUpperCase() + color.substring(1)
    let shapeType = shape.type[0].toUpperCase() + shape.type.substring(1)
    let perimeter = length * 2 + width * 2
    let description = `${shapeType} ${colorValue} shape that is ${perimeter} units around.`
    return [description, shape]
}

Expected   : Rectangular Blue shape that is 45 units around.,[object Object]
w/ type    : object
Actual     : Rectangular Blue shape that is 44 units around.,[object Object]
w/ type    : object
From Input : blue,10,12,rectangular
w/ type    : object
___________





Test 11
Results    : Pass
***********
Definition : 

(x, y) => {
        return (x * 4) + (y * 4)
    }

Expected   : 20
w/ type    : number
Actual     : 20
w/ type    : number
From Input : 2,3
w/ type    : object
___________





Test 12
Results    : Expected to Fail: Pass
***********
Definition : 

function rectGen(length, width, input) {
    class Rectangle {
        constructor(length, width, input) {
            this.length = length
            this.width = width
            this.type = input
        }
    }

    doublePeri = (x, y) => {
        return (x * 4) + (y * 4)
    }
    let rect = new Rectangle(length, width, input)
    return rect
}

Expected   : [object Object]
w/ type    : object
Actual     : [object Object]
w/ type    : object
From Input : 2,4,rectangle
w/ type    : object
___________





Test 13
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 1,2,3,4,2
w/ type    : object
Actual     : 56
w/ type    : number
From Input : 3,2,45,4,56
w/ type    : object
___________





Test 14
Results    : Pass
***********
Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 15
Results    : Expected to Fail: Pass
***********
Definition : 

function maxIterate(inputArray = [3,2]) {
    return Math.max(...inputArray)
}

Expected   : 2
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





Test 16
Results    : Pass
***********
This should pass with flying colors!

Definition : 

function maxIterateApply(inputArray = [3,2]) {
    return Math.max.apply(Math, [...inputArray])
}

Expected   : 3
w/ type    : number
Actual     : 3
w/ type    : number
From Input : undefined
w/ type    : undefined
___________





